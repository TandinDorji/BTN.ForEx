source("scrapeRMA.R")
source("scrapeBOB.R")
source("scrapeTBL.R")
rateRMA <- scrapeRMA()
rateRMA
rateRMA <- scrapeRMA()
source("scrapeRMA.R")
source("scrapeBOB.R")
source("scrapeTBL.R")
rateRMA <- scrapeRMA()
rateRMA
url <- "https://www.rma.org.com/" # url <- "https://www.rma.org.bt/"
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("URL/Website is down.")
}
)
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
url <- "https://www.rma.org.com/" # url <- "https://www.rma.org.bt/"
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("URL/Website is down.")
}
)
# retrieve all data from url and load into "contents"
# using read_html function from rvest package
# enclosed within error handler in case website is down
status <- ""
# retrieve all data from url and load into "contents"
# using read_html function from rvest package
# enclosed within error handler in case website is down
status <- TRUE
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
# print("URL/Website is down.")
status <- FALSE
}
)
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
# print("URL/Website is down.")
status <- FALSE
}
)
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("URL/Website is down.")
status <- FALSE
}
)
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
status <- FALSE
print("URL/Website is down.")
}
)
contents <- read_html(url)
url <- "https://www.rma.org.com/" # url <- "https://www.rma.org.bt/"
tryCatch(
contents <- read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("URL/Website is down.")
return(NA)
}
)
if (is.na(error)) {
cat("Error code\n")
} else {
cat("No error")
}
url <- "https://www.rma.org.com/" # url <- "https://www.rma.org.bt/"
contents <- tryCatch(read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("URL/Website is down.")
return(NA)
}
)
if (is.na(error)) {
cat("Error code\n")
} else {
cat("No error")
}
contents <- tryCatch(read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("URL/Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
cat("No error")
}
scrapeRMA2 <- function(){
url <- "https://www.rma.org.com/" # url <- "https://www.rma.org.bt/"
contents <- tryCatch(read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
# check table format before renaming columns
check1 <- names(xr) == c("CURRENCY", "Note", "Note.1", "TT", "TT.1")
check2 <- unlist(xr[1,], use.names = FALSE) ==
c("CURRENCY","BUY","SELL","BUY","SELL")
# if table format did not change, sum of checks 1,3 should be 10
# else, raise error via log file to trigger code revision
if(sum(check1, check2) == 10)
{
names(xr) <- c("Currency", "Notes.Buy", "Notes.Sell",
"TT.Buy", "TT.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
} else {
# triggerCodeRevision("RMA")
xr <- NULL
}
# rename currency names
source("renameCurrencies.R")
xr <- renameCurrencies("RMA", xr)
xr    # return df to main file
}
}
source("scrapeRMA2.R")
scrapeRMA2 <- function(){
url <- "https://www.rma.org.com/" # url <- "https://www.rma.org.bt/"
contents <- tryCatch(read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
# check table format before renaming columns
check1 <- names(xr) == c("CURRENCY", "Note", "Note.1", "TT", "TT.1")
check2 <- unlist(xr[1,], use.names = FALSE) ==
c("CURRENCY","BUY","SELL","BUY","SELL")
# if table format did not change, sum of checks 1,3 should be 10
# else, raise error via log file to trigger code revision
if(sum(check1, check2) == 10)
{
names(xr) <- c("Currency", "Notes.Buy", "Notes.Sell",
"TT.Buy", "TT.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
} else {
# triggerCodeRevision("RMA")
xr <- NULL
}
# rename currency names
source("renameCurrencies.R")
xr <- renameCurrencies("RMA", xr)
xr    # return df to main file
}
}
source("scrapeRMA2.R")
rateRMA <- scrapeRMA2()
rateRMA <- scrapeRMA2()
rateRMA
rateRMA <- scrapeRMA2()
rateRMA
contents <- tryCatch(
read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
# url <- "https://www.rma.org.com/"
url <- "https://www.rma.org.bt/"
contents <- tryCatch(
read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
scrapeRMA2 <- function(){
# url <- "https://www.rma.org.com/"
url <- "https://www.rma.org.bt/"
contents <- tryCatch(
read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
# check table format before renaming columns
check1 <- names(xr) == c("CURRENCY", "Note", "Note.1", "TT", "TT.1")
check2 <- unlist(xr[1,], use.names = FALSE) ==
c("CURRENCY","BUY","SELL","BUY","SELL")
# if table format did not change, sum of checks 1,3 should be 10
# else, raise error via log file to trigger code revision
if(sum(check1, check2) == 10)
{
names(xr) <- c("Currency", "Notes.Buy", "Notes.Sell",
"TT.Buy", "TT.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
} else {
# triggerCodeRevision("RMA")
xr <- NULL
}
# rename currency names
source("renameCurrencies.R")
xr <- renameCurrencies("RMA", xr)
xr <- cbind(xr, "Src" = "RMA")
xr    # return df to main file
}
}
rateRMA <- scrapeRMA2()
rateRMA
source("C:/Users/Tandin Dorji/OneDrive/Documents/R-Workspace/BTN.ForEx/scrapeRMA2.R")
source("C:/Users/Tandin Dorji/OneDrive/Documents/R-Workspace/BTN.ForEx/scrapeRMA2.R")
scrapeRMA2 <- function(){
url <- "https://www.rma.org.com/"
# url <- "https://www.rma.org.bt/"
contents <- tryCatch(
read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
# check table format before renaming columns
check1 <- names(xr) == c("CURRENCY", "Note", "Note.1", "TT", "TT.1")
check2 <- unlist(xr[1,], use.names = FALSE) ==
c("CURRENCY","BUY","SELL","BUY","SELL")
# if table format did not change, sum of checks 1,3 should be 10
# else, raise error via log file to trigger code revision
if(sum(check1, check2) == 10)
{
names(xr) <- c("Currency", "Notes.Buy", "Notes.Sell",
"TT.Buy", "TT.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
} else {
# triggerCodeRevision("RMA")
xr <- NULL
}
# rename currency names
source("renameCurrencies.R")
xr <- renameCurrencies("RMA", xr)
xr <- cbind(xr, "Src" = "RMA")
xr    # return df to main file
}
}
rateRMA <- scrapeRMA2()
rateRMA
rateRMA <- scrapeRMA2()
scrapeRMA2 <- function(){
url <- "https://www.rma.org.com/"
# url <- "https://www.rma.org.bt/"
contents <- tryCatch(
read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
# check table format before renaming columns
check1 <- names(xr) == c("CURRENCY", "Note", "Note.1", "TT", "TT.1")
check2 <- unlist(xr[1,], use.names = FALSE) ==
c("CURRENCY","BUY","SELL","BUY","SELL")
# if table format did not change, sum of checks 1,3 should be 10
# else, raise error via log file to trigger code revision
if(sum(check1, check2) == 10)
{
names(xr) <- c("Currency", "Notes.Buy", "Notes.Sell",
"TT.Buy", "TT.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
} else {
# triggerCodeRevision("RMA")
xr <- NULL
}
# rename currency names
source("renameCurrencies.R")
xr <- renameCurrencies("RMA", xr)
xr <- cbind(xr, "Src" = "RMA")
xr    # return df to main file
}
}
rateRMA <- scrapeRMA2()
rateRMA <- scrapeRMA2()
scrapeRMA2 <- function(){
# url <- "https://www.rma.org.com/"
url <- "https://www.rma.org.bt/"
contents <- tryCatch(
read_html(url),
error = function(e) {
# triggerHTTPSerror("RMA")
print("RMA Website is down.")
return(NA)
}
)
if (is.na(contents)) {
cat("Error code\n")
} else {
table_id <- "table"
table_data <- contents %>%
html_nodes(paste0("#", table_id)) %>%
html_table(fill = TRUE)
# store exchange rate into data frame and clean df
xr <- data.frame(table_data)
# check table format before renaming columns
check1 <- names(xr) == c("CURRENCY", "Note", "Note.1", "TT", "TT.1")
check2 <- unlist(xr[1,], use.names = FALSE) ==
c("CURRENCY","BUY","SELL","BUY","SELL")
# if table format did not change, sum of checks 1,3 should be 10
# else, raise error via log file to trigger code revision
if(sum(check1, check2) == 10)
{
names(xr) <- c("Currency", "Notes.Buy", "Notes.Sell",
"TT.Buy", "TT.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
} else {
# triggerCodeRevision("RMA")
xr <- NULL
}
# rename currency names
source("renameCurrencies.R")
xr <- renameCurrencies("RMA", xr)
xr <- cbind(xr, "Src" = "RMA")
xr    # return df to main file
}
}
rateRMA <- scrapeRMA2()
rateRMA
source("~/.active-rstudio-document")
# R script to scrape RMA, BOB, TBL website to extract current exchange rate
# for BTN against USD, AUD and SGD
# 12 rates as on 26/08/2023
### revised on 16 September, 2023
# Added code for error handling HTTPS error, when website is down
# Created new main file (BTN.Exchange ... ) and scrapeBanks_2 files
# to run in parallel with the older cron job for safety
# load libraries, install if not available
# if(!require(tidyverse)) install.packages("tidyverse")
if(!require(rvest)) {
install.packages("rvest")
library(rvest)
}
if(!require(dplyr)) {
install.packages("dplyr")
library(dplyr, include.only = c('case_when', 'case_match'))
# code to load only one function from a library
# from https://www.roelpeters.be/load-single-function-r-library/
}
# call scripts to scrape the three websites
# pass argument (URL)
# receive value --> df per site
source("scrapeRMA2.R")
source("scrapeBOB2.R")
source("scrapeTB2L.R")
# load libraries, install if not available
# if(!require(tidyverse)) install.packages("tidyverse")
if(!require(rvest)) {
install.packages("rvest")
library(rvest)
}
if(!require(dplyr)) {
install.packages("dplyr")
library(dplyr, include.only = c('case_when', 'case_match'))
# code to load only one function from a library
# from https://www.roelpeters.be/load-single-function-r-library/
}
source("scrapeRMA2.R")
source("scrapeBOB2.R")
source("scrapeTBL2.R")
rateRMA <- scrapeRMA2()
rateBOB <- scrapeBOB2()
rateTBL <- scrapeTBL2()
rate <- rbind(rateRMA, rateBOB, rateTBL)
rate <- cbind(rate, Date = format(Sys.Date(), "%Y%m%d"))
View(rate)
filename <- paste0("data/", format(Sys.time() + 10*60*60, "%Y%m%d-%H%M%S"), "_new.csv")
filename
write.csv(rate, filename, row.names = FALSE)
rm(list=ls())
gc()
cat("\014")
format(Sys.Date(), "%Y%m%d")
# R script to scrape RMA, BOB, TBL website to extract current exchange rate
# for BTN against USD, AUD and SGD
# 12 rates as on 26/08/2023
### revised on 16 September, 2023
# Added code for error handling HTTPS error, when website is down
# Created new main file (BTN.Exchange ... ) and scrapeBanks_2 files
# to run in parallel with the older cron job for safety
# load libraries, install if not available
# if(!require(tidyverse)) install.packages("tidyverse")
if(!require(rvest)) {
install.packages("rvest")
library(rvest)
}
if(!require(dplyr)) {
install.packages("dplyr")
library(dplyr, include.only = c('case_when', 'case_match'))
# code to load only one function from a library
# from https://www.roelpeters.be/load-single-function-r-library/
}
# call scripts to scrape the three websites
# pass argument (URL)
# receive value --> df per site
source("scrapeRMA2.R")
source("scrapeBOB2.R")
source("scrapeTBL2.R")
rateRMA <- scrapeRMA2()
rateBOB <- scrapeBOB2()
rateTBL <- scrapeTBL2()
rate <- rbind(rateRMA, rateBOB, rateTBL)
rate <- cbind(rate, Date = format(Sys.Date(), "%Y%m%d"))
# View(rate)
filename <- paste0("data/", format(Sys.time() + 10*60*60, "%Y%m%d-%H%M%S"), "_new.csv")
# saving file with time in AEST so that it is easier to read and check cron job success daily around noon AEST
# added_new suffix to differentiate the file scraped with new code with error handling
# for website error
write.csv(rate, filename, row.names = FALSE)
rm(list=ls())
gc()
cat("\014")
# q()
source("scrapeRMA2.R")
source("scrapeBOB2.R")
source("scrapeTBL2.R")
rateRMA <- scrapeRMA2()
rateBOB <- scrapeBOB2()
rateTBL <- scrapeTBL2()
rate <- rbind(rateRMA, rateBOB, rateTBL)
rate <- cbind(rate, Date = format(Sys.Date(), "%Y%m%d"))
# View(rate)
filename <- paste0("data/", format(Sys.time() + 10*60*60, "%Y%m%d-%H%M%S"), "_new.csv")
# saving file with time in AEST so that it is easier to read and check cron job success daily around noon AEST
# added_new suffix to differentiate the file scraped with new code with error handling
# for website error
write.csv(rate, filename, row.names = FALSE)
rm(list=ls())
gc()
cat("\014")
