str(df$Open.Date)
df$LastTrn.Dt. <- as.Date(df$LastTrn.Dt., "%Y-%m-%d")
str(df$LastTrn.Dt.)
# summary tables
summary(df)
table(df$Dzongkhag, df$Int.Rate)
table(df$PR, df$Status)
# convert PR, Dzongkhag to factor
df$PR <- as.factor(df$PR)
df$Dzongkhag <- as.factor(df$Dzongkhag)
avg.bal <- data.frame(tapply(df$Balance.of.Account, df$Dzongkhag, mean))
avg.bal <- cbind(row.names(avg.bal), avg.bal)
names(avg.bal) <- c("Dzongkhag", "Average")
rownames(avg.bal) <- NULL
tot.bal <- data.frame(tapply(df$Balance.of.Account, df$Dzongkhag, sum))
tot.bal <- cbind(row.names(tot.bal), tot.bal)
names(tot.bal) <- c("Dzongkhag", "Total")
rownames(tot.bal) <- NULL
bal <- merge(avg.bal, tot.bal)
barplot(Total ~ Dzongkhag, data = bal,
main = "Total Savings by Dzongkhag", col = as.factor(bal$Dzongkhag))
barplot(Total ~ Dzongkhag, data = bal,
main = "Total Savings by Dzongkhag", col = factor(bal$Dzongkhag))
barplot(Average ~ Dzongkhag, data = bal, main = "Average Savings by Dzongkhag",
col = factor(bal$Dzongkhag))
barplot(Total ~ Dzongkhag, data = bal,
main = "Total Savings by Dzongkhag", col = factor(bal$Dzongkhag))
barplot(Average ~ Dzongkhag, data = bal, main = "Average Savings by Dzongkhag",
col = factor(bal$Dzongkhag))
barplot(Average ~ Dzongkhag, data = bal, main = "Average Savings by Dzongkhag",
col = rainbow(length(unique(bal$Dzongkhag))))
main = "Total Savings by Dzongkhag", col = rainbow(length(unique(bal$Dzongkhag)))
barplot(Total ~ Dzongkhag, data = bal,
main = "Total Savings by Dzongkhag", col = rainbow(length(unique(bal$Dzongkhag))))
barplot(Average ~ Dzongkhag, data = bal, main = "Average Savings by Dzongkhag",
col = spectral(length(unique(bal$Dzongkhag))))
rainbow
barplot(Average ~ Dzongkhag, data = bal, main = "Average Savings by Dzongkhag",
col = rainbow(length(unique(bal$Dzongkhag))))
library(ggplot2)
ggplot(data=bal, aes(Dzongkhag)) +
geom_bar(stat = "identity", aes(y=Total, fill = Dzongkhag)) +
theme(
axis.text.x = element_text(angle = 90)
) +
labs(
title = "Total savings by Dzongkhag",
x = NULL
)
ggplot(data=df) +
geom_bar(aes(x=Dzongkhag, fill = Dzongkhag)) +
theme(
axis.text.x = element_text(angle = 90),
) +
labs(
title = "Number of savings account by Dzongkhag",
x = NULL
) +
guides(fill = "none")
ggplot(data=bal, aes(Dzongkhag)) +
geom_bar(stat = "identity", aes(y=Average, fill = Dzongkhag)) +
theme(
axis.text.x = element_text(angle = 90)
) +
labs(
title = "Average YDPS balance by Dzongkhag",
x = NULL
)
View(dat)
dat <- df
View(dat)
# remove columns 4, 5
dat <- dat[, -c(4,5)]
# rename columns
names(dat) <- dat[5, ]
# remove rows 1-7
dat <- dat[-c(1:7), ]
# remove all rows that does not contain "Branch" in col 1 and col 3 is empty
index.to.rmv <- which(!grepl("Branch", dat$CID) & nchar(dat$`Customer Name`) == 0)
View(dat[index.to.rmv, ])
View(dat)
# remove all rows that contains "All Branches" and characters less than 3
index.to.rmv2 <- which(nchar(dat$CID) < 4 | grepl("All Branches", dat$CID))
dat <- dat[-index.to.rmv2, ]
View(dat)
View(dat)
# add branch name to customer data (in row)
branch <- ""
for (i in 1:nrow(dat)) {
cust <- dat[i, 1]
if(grepl("Branch", cust)) {
branch = gsub("[0-9]+\\s--\\s", "", cust)
branch = gsub("\\sBranch", "", branch)
}
dat[i, 11] <- branch
}
# rename V11
names(dat) = c(names(dat)[1:10], "Dzongkhag")
# remove rows without customer
index.to.rmv3 <- which(nchar(dat$`Customer Name`) == 0)
dat <- dat[-index.to.rmv3, ]
View(dat)
View(df)
# R script to scrape BOB website to extract current exchange rate
# for BTN against USD, AUD and SGD
# load libraries, install if not available
# if(!require(tidyverse)) install.packages("tidyverse")
if(!require(rvest)) {
install.packages("rvest")
library(rvest)
}
# retrieve all data from url and load into "contents"
# using read_html function from rvest package
url <- "https://www.bob.bt/service-and-support/current-rate-of-exchange/"
contents <- read_html(url)
table_id <- "tablepress-3"
table_data <- contents %>% html_nodes(paste0("#", table_id)) %>% html_table(fill = TRUE)
# Print the table data
print(table_data)
xr <- data.frame(table_data)
names(xr) <- c("Currency", "10.Percent.Incentive.Rate",
"TT.Buy", "TT.Sell", "Notes.Buy", "Notes.Sell")
xr <- xr[-1, ]
rownames(xr) <- NULL
# Save data to a CSV file
filename <- paste0("C:/Users/Tandin Dorji/OneDrive/Documents/R-Workspace/BTN.ForEx/Rates/", format(Sys.time(), "%Y%m%d"), ".csv")
write.csv(xr, filename, row.names = FALSE)
rm(list=ls())
gc()
cat("\014")
# q()
getwd()
library(swirl)
swirl()
rm(list = ls())
remove.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
1
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = "8", main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = "8", col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source("plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
play()
pal(.5)
nxt(\)
nxt()
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette((c("blue", "green"), alpha = .5))
p3 <- colorRampPalette((c("blue", "green"), alpha = .5))
d
p3 <- colorRampPalette((c("blue", "green", alpha = .5)))
p3 <- colorRampPalette(c("blue", "green", alpha = .5))
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
play()
RColorBrewer
RColorBrewer()
nxt()
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
p1(20)
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color = "manufacturer")
qplot(drv, hwy, data=mpg, geom="boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv ~ ., binwidth=2)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"), facets=.~drv)
play()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"), facets=.~drv, color=manufacturer)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"), facets=.~drv, color=drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"), facets=.~drv, color=drv, legend = NULL)
nxt()
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="lm") +geom_smooth()
g + geom_point() + geom_smooth(method="lm", color = "red") +geom_smooth()
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color = drv))
g+geom_point(size=4, alpha=1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") +
| labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha=1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, x=myx, myy, )
g <- ggplot(testdat, aes(x=myx, myy))
g + geom_line()
g + geom_line(ylim=c(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(displ, hwy, color=factor(year)))
g
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black") + labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price, diamonds)
histogram(price, diamonds)
histogram(price, data=diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, shape=cut, geom_smooth(method="lm"))
nxt()
goe
qplot(carat, price, data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facets(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facets=.~cut
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
g
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$cut, seq(0, 1, 4), na.rm=TRUE)
cutpoints <- quantile(diamonds$cut, seq(0, 1, length=4), na.rm=TRUE)
cutpoints <- quantile()
cutpoints <- quantile(diamonds$cut)
cutpoints <- quantile(diamonds$cut, type=3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(x = diamonds$carat, cut = cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(price)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(color, price)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(depth, price)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(depth, price)) + geom_boxplot()
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot()
?geom_boxplot
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation = y)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation = x)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation = "y")
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation = "x")
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation) + facet_grid(rows = 1, cols = 4)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot() + facet_grid(rows = 1, cols = 4)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot() + facet_grid(.~carat)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation = "y") + facet_grid(.~cut)
ggplot(diamonds, aes(price, group = cut)) + geom_boxplot(orientation = "x") + facet_grid(.~cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
range(diamonds$carat)
ggplot(diamonds, aes(carat, price)) + geom_boxplot(outlier.colour = "red") + facet_grid(.~cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot(outlier.colour = "red", outlier.shape = 2) + facet_grid(.~cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot(outlier.colour = "red", outlier.shape = 8) + facet_grid(.~cut)
q()
q()
library(rattle)
install.packages("rattle")
q()
attach(iris)
plot(Sepal.Length, Sepal.Width)
attach(cars)
plot(Sepal.Length, Sepal.Width)
plot(Sepal.Length, Sepal.Width)
plot(speed, dist)
?RMSE
??RMSE
??Rsquare
??Rsquared
?modelr
??modelr
modelr
?modelr::bootstrap()
detach(iris)
plot(speed, dist)
plot(Sepal.Length, Sepal.Width)
dev.off()
q()
install.packages("threejs")
library(threejs)
# scatter plot
scatterplot3js(x, y, z, color=rainbow(length(z)))
install.packages("maps")
library(maps)
data(world.cities, package="maps")
cities <- world.cities[order(world.cities$pop, decreasing=TRUE)[1:500], ]
value <- 100 * cities$pop / max(cities$pop)
# plot using globejs plot
globejs(bg="white", lat=cities$lat, long=cities$long,
value=value, rotationlat=-0.34, rotationlong=-0.38,
fov=30, atmosphere = TRUE)
# additional practice
# arc df
df <- data.frame(27.4661, 89.6419, -35.2381, 149.0838)
globejs(bg="white", lat=cities$lat, long=cities$long,
value=value,
fov=30, arcs = df, arcsHeight=0.3, arcsLwd=200,
arcsColor="#ffff00", arcsOpacity=1)
# Load data first
#install.packages("maps")
library(maps)
data(world.cities, package="maps")
cities <- world.cities[order(world.cities$pop, decreasing=TRUE)[1:5000], ]
value <- 100 * cities$pop / max(cities$pop)
# plot using globejs plot
globejs(bg="white", lat=cities$lat, long=cities$long,
value=value, rotationlat=-0.34, rotationlong=-0.38,
fov=30, atmosphere = TRUE)
# additional practice
# arc df
df <- data.frame(27.4661, 89.6419, -35.2381, 149.0838)
globejs(bg="white", lat=cities$lat, long=cities$long,
value=value,
fov=30, arcs = df, arcsHeight=0.3, arcsLwd=200,
arcsColor="#ffff00", arcsOpacity=1)
q()
# install aframer and arframer
devtools::install_github("JohnCoene/aframer") # select option 3 (none)
devtools::install_github("JohnCoene/arframer") # select option 3 (none)
# load libraries
library(aframer)
library(arframer)
library(aframer)
detach("package:aframer", unload = TRUE)
library(aframer)
library(arframer)
# Ex 10
# it creates the scenes in html code
embed_aframe(
a_scene(
a_dependency(),
a_box(position = "-1 0.5 -3", rotation = "0 45 0", color = "#4CC3D9"),
a_sphere(position = "0 1.25 -5", radius = "1.25", color = "#EF2D5E"),
a_cylinder(position = "1 0.75 -3", radius = "0.5",
height = "1.5", color = "#FFC65D"),
a_plane(position = "0 0 -4", rotation = "-90 0 0", width = "4",
height = "4", color = "#7BC8A4"),
a_sky(color="#ECECEC")
)
)
browse_aframe(
a_scene(
a_dependency(),
a_box(position = "-1 0.5 -3", rotation = "0 45 0", color = "#4CC3D9"),
a_sphere(position = "0 1.25 -5", radius = "1.25", color = "#EF2D5E"),
a_cylinder(position = "1 0.75 -3", radius = "0.5",
height = "1.5", color = "#FFC65D"),
a_plane(position = "0 0 -4", rotation = "-90 0 0", width = "4",
height = "4", color = "#7BC8A4"),
a_sky(color="#ECECEC")
)
)
browse_aframe(
ar_scene(
a_box(position = "0 0.5 0", material = "opacity: 0.5;"),
a_primitive("marker-camera", list(preset = "hiro"))
)
)
browse_aframe(
ar_scene(
a_box(position = "0 0.5 0", material = "opacity: 0.5;"),
a_primitive("marker-camera", list(preset = "hiro"))
)
)
embed_aframe(
ar_scene(
a_box(position = "0 0.5 0", material = "opacity: 0.5;"),
a_primitive("marker-camera", list(preset = "hiro"))
)
)
browse_aframe(
ar_scene(
a_box(position = "0 0.5 0", material = "opacity: 0.5;"),
a_primitive("marker-camera", list(preset = "hiro"))
)
)
>hclust
?hclust
?kclust
??kmeans
?kmeans()
hclust(iris[1:4])
hclust(iris[1:4])
iris[1:4]
?hclust
/dist
?dist
dist(iris[1:4])
hclust(dist(iris[1:4]), method = "complete")
plot(hclust(dist(iris[1:4]), method = "complete"))
plot(hclust(dist(iris[1:4]), method = "complete"), col = factor(iris$Species))
plot(hclust(dist(iris[1:4]), method = "complete"), col = as.numeric(iris$Species))
plot(hclust(dist(iris[1:4]), method = "complete"), col = as.numeric(iris$Species))
?hclust
?kmeans()
kmeans(iris[1:4], centers=3)
plot(kmeans(iris[1:4], centers=3))
kmc1 <- kmeans(iris[1:4], 3)
kmc1[1]
kmc1[2]
kmc1[1]
res <- data.frame(pred=kmc1[1], actual=iris$Species)
res[pred ! = actual, ]
res[pred != actual, ]
res[res$pred != res$actual, ]
rest
View(res)
actual <- ifelse(iris$Species == "setosa", 3, ifelse(iris$Species == "versicolor", 2, 1))
actual
res <- data.frame(pred=kmc1[1], actual=actual)
res[res$cluster != res$actual, ]
nrow(res[res$cluster != res$actual, ])
q()
rm(list = ls())
dev.off()
q()
source("scrapeRMA.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("scrapeRMA.R")
source("scrapeBOB.R")
source("scrapeTBL.R")
View(scrapeBOB)
View(scrapeRMA)
View(scrapeTBL)
# rename currency names
source("renameCurrencies.R")
View(renameCurrencies)
data(trees)
# Height as the response and Girth as the predictor
summary(lm(Height ~ Girth, data = trees))
26.67 - 32
rm(list=ls())
dev.off()
